order by r.Company, cast(left(convert(varchar(25), churn_date),11) as datetime) desc
")
tot <- fetch(qry,n=-1) ## return all elements
tot[,1] <- as.Date(tot[,1], "%Y-%m-%d")
tot$churnType <- "total"
head(tot)
final <- rbind(seq,tot)
ggplot(final, aes(x=date, y=filter(churn, rep(1/7, 7), sides=2), group = churnType, colour = churnType)) +
#  scale_x_date(format = "%Y-%m-%d") +
#stat_smooth(aes(), # continuous x-axis
#            se = F, method = "lm", formula = y ~ poly(x, 20)) + geom_line()
geom_line(size=.3, alpha=.9) + aes(group=rev(churnType))
ggplot(final, aes(x=date, y=filter(churn, rep(1/7, 7), sides=2), group = interaction(churnType,Company), colour = Company, linetype = churnType)) +
#  scale_x_date(format = "%Y-%m-%d") +
#stat_smooth(aes(), # continuous x-axis
#            se = F, method = "lm", formula = y ~ poly(x, 20)) + geom_line()
geom_line(size=.3, alpha=.9)
ggplot(final, aes(x=date, y=filter(churn, rep(1/7, 7), sides=2), group = churnType, colour = churnType)) +
#  scale_x_date(format = "%Y-%m-%d") +
#stat_smooth(aes(), # continuous x-axis
#            se = F, method = "lm", formula = y ~ poly(x, 20)) + geom_line()
geom_line(size=.3, alpha=.9) + aes(group=rev(churnType))
ggplot(totCounts, aes(x=sequentiality,y=count,fill=type)) +
geom_bar(stat="identity",position="dodge") + ylim(0, 20000)
+ scale_x_continuous(breaks = seq(0,1000,by = 50))
ggplot(totCounts2, aes(x=sequentiality,y=count,fill=type)) +
geom_bar(stat="identity") + ylim(0, 50000) + scale_x_continuous(breaks = seq(0,1000,by = 50))
#really noisy. NPANXXB is probably better measurement, but ask Kyle?
ggplot(totCounts2, aes(x=sequentiality,y=count,fill=type)) +
geom_bar(stat="identity",position="dodge") + ylim(0, 50000) + scale_x_continuous(breaks = seq(0,1000,by = 50))
canada_con <- dbConnect(drv, "jdbc:sqlserver://52.5.206.182:1433", "IDaher", "Pi^VitAc")
qry <- dbSendQuery(canada_con,"select SEQ_15_TN6 as sequentiality, count(SEQ_15_TN6) as count, '15' as type from com_canada..F_CHURN_SEQ where SEQ_15_TN6 >2 and SEQ_15_TN6 <= 1000
group by SEQ_15_TN6 order by SEQ_15_TN6")
counts4 <- fetch(qry,n=-1)
totCounts2 <- rbind(counts3,counts4)
ggplot(totCounts2, aes(x=sequentiality,y=count,fill=type)) +
geom_bar(stat="identity",position="dodge") + ylim(0, 50000) + scale_x_continuous(breaks = seq(0,1000,by = 50))
#really noisy. NPANXXB is probably better measurement, but ask Kyle?
ggplot(totCounts2, aes(x=sequentiality,y=count,fill=type)) +
geom_bar(stat="identity",position="dodge") + ylim(0, 50000)
qry <- dbSendQuery(canada_con,"select SEQ_15_TN6 as sequentiality, count(SEQ_15_TN6) as count, '15' as type from com_canada..F_CHURN_SEQ where SEQ_15_TN6 >2
group by SEQ_15_TN6 order by SEQ_15_TN6")
counts4 <- fetch(qry,n=-1)
totCounts2 <- rbind(counts3,counts4)
ggplot(totCounts2, aes(x=sequentiality,y=count,fill=type)) +
geom_bar(stat="identity",position="dodge") + ylim(0, 50000) + scale_x_continuous(breaks = seq(0,1000,by = 50))
#really noisy. NPANXXB is probably better measurement, but ask Kyle?
ggplot(totCounts2, aes(x=sequentiality,y=count,fill=type)) +
geom_bar(stat="identity",position="dodge") + ylim(0, 50000)
ggplot(totCounts, aes(x=sequentiality,y=count,fill=type)) +
geom_bar(stat="identity",position="dodge") + ylim(0, 20000)
+ scale_x_continuous(breaks = seq(0,1000,by = 50))
ggplot(totCounts, aes(x=sequentiality,y=count,fill=type)) +
geom_bar(stat="identity",position="dodge") + ylim(0, 20000)
ggplot(totCounts, aes(x=sequentiality,y=count,fill=type)) +
geom_bar(stat="identity",position="dodge") + ylim(0, 20000)
+ scale_x_continuous(breaks = seq(0,1000,by = 50))
ggplot(totCounts, aes(x=sequentiality,y=count,fill=type)) +
geom_bar(stat="identity",position="dodge") + ylim(0, 20000) + scale_x_continuous(breaks = seq(0,1000,by = 50))
#every 100 there's a spike
ggplot(totCounts, aes(x=sequentiality,y=count,fill=type)) +
geom_bar(stat="identity",position="dodge") + ylim(0, 20000) + scale_x_continuous(breaks = seq(0,1000,by = 50)) +
title("Frequency of Sequentiality in Canada between 7/2012 and 4/2015 using K BLOCKS")
ggplot(totCounts, aes(x=sequentiality,y=count,fill=type)) +
geom_bar(stat="identity",position="dodge") + ylim(0, 20000) + scale_x_continuous(breaks = seq(0,1000,by = 50)) +
title("Frequency of Sequentiality in Canada between 7/2012 and 4/2015 using K BLOCKS")
ggplot(totCounts, aes(x=sequentiality,y=count,fill=type)) +
geom_bar(stat="identity",position="dodge") + ylim(0, 20000) + scale_x_continuous(breaks = seq(0,1000,by = 50)) +
ggtitle("Frequency of Sequentiality in Canada between 7/2012 and 4/2015 using K BLOCKS")
#every 100 there's a spike
ggplot(totCounts, aes(x=sequentiality,y=count,fill=type)) +
geom_bar(stat="identity",position="dodge") + ylim(0, 20000) + scale_x_continuous(breaks = seq(0,1000,by = 50)) +
ggtitle("Frequency of Sequentiality in Canada between 7/2012 and 4/2015 using K BLOCKS")
#every 100 there's a spike
ggplot(totCounts, aes(x=sequentiality,y=count,fill=type)) +
geom_bar(stat="identity",position="dodge") + ylim(0, 20000) + scale_x_continuous(breaks = seq(0,1000,by = 50)) +
ggtitle("Frequency of Sequentiality in Canada between 7/2012 and 4/2015 using K BLOCKS")
#every 100 there's a spike
ggplot(totCounts2, aes(x=sequentiality,y=count,fill=type)) +
geom_bar(stat="identity",position="dodge") + ylim(0, 50000) + scale_x_continuous(breaks = seq(0,1000,by = 50))
canada_con <- dbConnect(drv, "jdbc:sqlserver://52.5.206.182:1433", "IDaher", "Pi^VitAc")
qry <- dbSendQuery(canada_con,"select SEQ_MONTH_TN6 as sequentiality, count(SEQ_MONTH_TN6) as count, 'month' as type from com_canada..F_CHURN_SEQ where SEQ_MONTH_TN6 > 2 and SEQ_MONTH_TN6 <= 1000
group by SEQ_MONTH_TN6 order by SEQ_MONTH_TN6 ")
counts3 <- fetch(qry,n=-1)
qry <- dbSendQuery(canada_con,"select SEQ_15_TN6 as sequentiality, count(SEQ_15_TN6) as count, '15' as type from com_canada..F_CHURN_SEQ where SEQ_15_TN6 >2 and SEQ_15_TN6 <= 1000
group by SEQ_15_TN6 order by SEQ_15_TN6")
counts4 <- fetch(qry,n=-1)
totCounts2 <- rbind(counts3,counts4)
ggplot(totCounts2, aes(x=sequentiality,y=count,fill=type)) +
geom_bar(stat="identity",position="dodge") + ylim(0, 50000) + scale_x_continuous(breaks = seq(0,1000,by = 50))
ggplot(totCounts2, aes(x=sequentiality,y=count,fill=type)) +
geom_bar(stat="identity",position="dodge") + ylim(0, 50000) + scale_x_continuous(breaks = seq(0,1000,by = 50)) +
ggtitle("Frequency of Sequentiality in Canada between 7/2012 and 4/2015 using K BLOCKS")
ggplot(totCounts2, aes(x=sequentiality,y=count,fill=type)) +
geom_bar(stat="identity",position="dodge") + ylim(0, 50000) + scale_x_continuous(breaks = seq(0,1000,by = 50)) +
ggtitle("Frequency of Sequentiality in Canada between 7/2012 and 4/2015 using A BLOCKS")
#really noisy. NPANXXB is probably better measurement, but ask Kyle?
ggplot(totCounts, aes(x=sequentiality,y=count,fill=type)) +
geom_bar(stat="identity",position="dodge") + ylim(0, 20000) + scale_x_continuous(breaks = seq(0,1000,by = 50)) +
ggtitle("Frequency of Sequentiality in Canada between 7/2012 and 4/2015 using K BLOCKS")
#every 100 there's a spike
require(RJDBC)
require(ggplot2)
require(TTR)
require(plyr)
dir_path <- "/Users/idaher/Documents/Comlinkdata/Introductory and Reference/Drivers/"
path_sqljdbc4 <- paste0(dir_path, "sqljdbc4.jar")
drv <- JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver",
path_sqljdbc4)
canada_con <- dbConnect(drv, "jdbc:sqlserver://54.235.116.68:1433", "IDaher", "Pi^VitAc")
canada_con <- dbConnect(drv, "jdbc:sqlserver://52.5.206.182:1433", "IDaher", "Pi^VitAc")
qry2 <- dbSendQuery(canada_con,"
select r.Company, cast(left(convert(varchar(25), churn_date),11) as datetime) as date, count(cast(left(convert(varchar(25), churn_date),11) as datetime)) as churn
from com_cdm..f_final_churn f join com_cdm_stage..ocn_company_062712 r
on f.churn_winning_sp = r.common_ocn_dim_id where churn_date_dim_id > 8217
and Company like '%W'
group by r.Company, cast(left(convert(varchar(25), churn_date),11) as datetime)
order by r.Company, cast(left(convert(varchar(25), churn_date),11) as datetime) desc
")
qry2 <- dbSendQuery(canada_con,"
select r.Company, cast(left(convert(varchar(25), churn_date),11) as datetime) as date, count(cast(left(convert(varchar(25), churn_date),11) as datetime)) as churn
from com_cdm..f_final_churn f join com_cdm_stage..r_common_ocn_alldates r
on f.churn_winning_sp = r.common_ocn_dim_id where churn_date_dim_id > 8217 and commondate = '2012-06-30 00:00:00'
and Company like '%W'
group by r.Company, cast(left(convert(varchar(25), churn_date),11) as datetime)
order by r.Company, cast(left(convert(varchar(25), churn_date),11) as datetime) desc
")
qry2 <- dbSendQuery(canada_con,"
select r.company_name as Company, cast(left(convert(varchar(25), churn_date),11) as datetime) as date, count(cast(left(convert(varchar(25), churn_date),11) as datetime)) as churn
from com_cdm..f_final_churn f join com_cdm_stage..r_common_ocn_alldates r
on f.churn_winning_sp = r.common_ocn_dim_id where churn_date_dim_id > 8217 and commondate = '2012-06-30 00:00:00'
and common_ocn_mode = 'W'
group by r.company_name, cast(left(convert(varchar(25), churn_date),11) as datetime)
order by r.company_name, cast(left(convert(varchar(25), churn_date),11) as datetime) desc
")
ret2 <- fetch(qry2,n=-1) ## return all elements
head(ret2)
ggplot(ret3, aes(x=date, y=filter(churn,rep(1/7,7)), group = churn_type, colour = churn_type)) +
#  scale_x_date(format = "%Y-%m-%d") +
#stat_smooth(aes(), # continuous x-axis
#           se = F, method = "lm", formula = y ~ poly(x, 20)) +
#geom_line(size=.3, alpha=.9) +
xlab("Date") + ylab("Churn Records") +
ggtitle("Canada F_CHURN records over time by churn type") +  # Set title
theme_bw() +
# theme(legend.position=c(.8, .8)) +
ylim(0, 7500) +
geom_line(position="jitter",data = madf3, mapping=aes(x = date, y = mavg, color = churn_type), size=.3)
ggplot(ret2, aes(x=date, y=filter(churn,rep(1/7,7)), group = Company, colour = Company)) +
#  scale_x_date(format = "%Y-%m-%d") +
stat_smooth(aes(), # continuous x-axis
se = F, method = "lm", formula = y ~ poly(x, 20)) +
#geom_line(size=.3, alpha=.9) +
xlab("Date") + ylab("Churn Records") +
ggtitle("Wireless Canada F_CHURN records over time by company") +  # Set title
theme_bw() +
theme(legend.position=c(.8, .8)) +
ylim(0, 7500) +
geom_line(data = madf2, mapping=aes(x = date, y = mavg, color = Company), size=.3)
ggplot(ret2, aes(x=date, y=filter(churn,rep(1/7,7)), group = Company, colour = Company)) +
#  scale_x_date(format = "%Y-%m-%d") +
stat_smooth(aes(), # continuous x-axis
se = F, method = "lm", formula = y ~ poly(x, 20)) +
#geom_line(size=.3, alpha=.9) +
xlab("Date") + ylab("Churn Records") +
ggtitle("Wireless Canada F_CHURN records over time by company") +  # Set title
theme_bw() +
theme(legend.position=c(.8, .8)) +
ylim(0, 7500)
ggplot(ret2, aes(x=date, y=filter(churn,rep(1/7,7)), group = Company, colour = Company)) +
#  scale_x_date(format = "%Y-%m-%d") +
stat_smooth(aes(), # continuous x-axis
se = F, method = "lm", formula = y ~ poly(x, 20)) +
#geom_line(size=.3, alpha=.9) +
xlab("Date") + ylab("Churn Records") +
ggtitle("Wireless Canada F_CHURN records over time by company") +  # Set title
theme_bw() +
theme(legend.position=c(.8, .8)) +
ylim(0, 7500)
ggplot(ret2, aes(x=date, y=filter(churn,rep(1/7,7)), group = Company, colour = Company)) +
#  scale_x_date(format = "%Y-%m-%d") +
#stat_smooth(aes(), # continuous x-axis
#            se = F, method = "lm", formula = y ~ poly(x, 20)) +
geom_line(size=.3, alpha=.9) +
xlab("Date") + ylab("Churn Records") +
ggtitle("Wireless Canada F_CHURN records over time by company") +  # Set title
theme_bw() +
theme(legend.position=c(.8, .8)) +
ylim(0, 7500)
f <- function(d)
{
require(zoo)
data.frame(date = d$date[7:length(d$date)],
mavg = rollmean(d$churn, 7))
}
madf2 <- ddply(ret2, "Company", f)
ggplot(ret2, aes(x=date, y=churn, group = Company, colour = Company)) +
#  scale_x_date(format = "%Y-%m-%d") +
stat_smooth(aes(), # continuous x-axis
se = F, method = "lm", formula = y ~ poly(x, 20)) +
geom_line(size=.3, alpha=.9) +
xlab("Date") + ylab("Churn Records") +
ggtitle("Wireless Canada F_CHURN records over time by company") +  # Set title
theme_bw() +
theme(legend.position=c(.8, .8)) +
ylim(0, 7500) +
geom_line(data = madf2, mapping=aes(x = date, y = mavg, color = Company), size=.3)
ggplot(ret2, aes(x=date, y=churn, group = Company, colour = Company)) +
#  scale_x_date(format = "%Y-%m-%d") +
stat_smooth(aes(), # continuous x-axis
se = F, method = "lm", formula = y ~ poly(x, 20)) +
geom_line(size=.3, alpha=.9) +
xlab("Date") + ylab("Churn Records") +
ggtitle("Wireless Canada F_CHURN records over time by company") +  # Set title
theme_bw() +
#theme(legend.position=c(.8, .8)) +
ylim(0, 7500) +
geom_line(data = madf2, mapping=aes(x = date, y = mavg, color = Company), size=.3)
ggplot(ret2, aes(x=date, y=churn, group = Company, colour = Company)) +
#  scale_x_date(format = "%Y-%m-%d") +
stat_smooth(aes(), # continuous x-axis
se = F, method = "lm", formula = y ~ poly(x, 20)) +
#geom_line(size=.3, alpha=.9) +
xlab("Date") + ylab("Churn Records") +
ggtitle("Wireless Canada F_CHURN records over time by company") +  # Set title
theme_bw() +
#theme(legend.position=c(.8, .8)) +
ylim(0, 7500) +
geom_line(data = madf2, mapping=aes(x = date, y = mavg, color = Company), size=.3)
qry2 <- dbSendQuery(canada_con,"select r.Company, cast(left(convert(varchar(25), churn_date),11) as datetime) as date, count(cast(left(convert(varchar(25), churn_date),11) as datetime)) as churn
from com_cdm..f_final_churn f join com_cdm_stage..ocn_company_062712 r
on f.churn_winning_ocn = r.ocn where churn_date_dim_id > 8217
and Company like '%W'
group by r.Company, cast(left(convert(varchar(25), churn_date),11) as datetime)
order by r.Company, cast(left(convert(varchar(25), churn_date),11) as datetime) desc
")
ret2 <- fetch(qry2,n=-1) ## return all elements
ret2[,2] <- as.Date(ret2[,2], "%Y-%m-%d")
head(ret2)
f <- function(d)
{
require(zoo)
data.frame(date = d$date[7:length(d$date)],
mavg = rollmean(d$churn, 7))
}
madf2 <- ddply(ret2, "Company", f)
ggplot(ret2, aes(x=date, y=churn, group = Company, colour = Company)) +
#  scale_x_date(format = "%Y-%m-%d") +
stat_smooth(aes(), # continuous x-axis
se = F, method = "lm", formula = y ~ poly(x, 20)) +
#geom_line(size=.3, alpha=.9) +
xlab("Date") + ylab("Churn Records") +
ggtitle("Wireless Canada F_CHURN records over time by company") +  # Set title
theme_bw() +
#theme(legend.position=c(.8, .8)) +
ylim(0, 7500) +
geom_line(data = madf2, mapping=aes(x = date, y = mavg, color = Company), size=.3)
qry2 <- dbSendQuery(canada_con,"select a.*, b.CAL_QTR_NM into #t2 from com_cdm..f_final_churn a
join com_cdm..d_date b on a.CYear = b.YEAR_NUM and a.CMonth = b.MONTH_NUM and a.CDay = b.DAY_OF_THE_MONTH;
select CAL_QTR_NM, CHURN_WINNING_SP, count(CHURN_WINNING_SP) as churn from  #t2
group by CAL_QTR_NM, CHURN_WINNING_SP
order by CAL_QTR_NM, CHURN_WINNING_SP
")
ret2 <- fetch(qry2,n=-1) ## return all elements
head(ret2)
ggplot(ret2, aes(x=CAL_QTR_NM, y=churn, group = CHURN_WINNING_SP, colour = CHURN_WINNING_SP)) +
#  scale_x_date(format = "%Y-%m-%d") +
stat_smooth(aes(), # continuous x-axis
se = F, method = "lm", formula = y ~ poly(x, 20)) +
geom_line(size=.3, alpha=.9) +
xlab("Date") + ylab("Churn Records") +
ggtitle("Wireless Canada F_CHURN records over time by company") +  # Set title
theme_bw() +
#theme(legend.position=c(.8, .8)) +
ylim(0, 7500)
ggplot(ret2, aes(x=CAL_QTR_NM, y=churn, group = CHURN_WINNING_SP, colour = CHURN_WINNING_SP)) +
#  scale_x_date(format = "%Y-%m-%d") +
stat_smooth(aes(), # continuous x-axis
se = F, method = "lm", formula = y ~ poly(x, 20)) +
geom_line(size=.3, alpha=.9) +
xlab("Date") + ylab("Churn Records") +
ggtitle("Wireless Canada F_CHURN records over time by company") +  # Set title
theme_bw()
ggplot(ret2, aes(x=CAL_QTR_NM, y=churn, group = CHURN_WINNING_SP, colour = CHURN_WINNING_SP)) +
#  scale_x_date(format = "%Y-%m-%d") +
#stat_smooth(aes(), # continuous x-axis
#            se = F, method = "lm", formula = y ~ poly(x, 20)) +
geom_line(size=.3, alpha=.9) +
xlab("Date") + ylab("Churn Records") +
ggtitle("Wireless Canada F_CHURN records over time by company") +  # Set title
theme_bw()
qry2 <- dbSendQuery(canada_con,"select a.*, b.CAL_QTR_NM, c.Group_Name into #t1 from com_cdm..f_final_churn a
join com_cdm..d_date b on a.CYear = b.YEAR_NUM and a.CMonth = b.MONTH_NUM and a.CDay = b.DAY_OF_THE_MONTH
join com_cdm_stage..D_LL_Groups_Companies_Subsidiaries_OCNs_Canada c on a.CHURN_WINNING_SP = c.Group_SP
where churn_winning_mode = 'W';
select CAL_QTR_NM, Group_Name, count(Group_Name) as churn from  #t1
group by CAL_QTR_NM, Group_Name
order by CAL_QTR_NM, Group_Name
")
ret2 <- fetch(qry2,n=-1) ## return all elements
head(ret2)
ggplot(ret2, aes(x=CAL_QTR_NM, y=churn, group = CHURN_WINNING_SP, colour = CHURN_WINNING_SP)) +
#  scale_x_date(format = "%Y-%m-%d") +
#stat_smooth(aes(), # continuous x-axis
#            se = F, method = "lm", formula = y ~ poly(x, 20)) +
geom_line(size=.3, alpha=.9) +
xlab("Date") + ylab("Churn Records") +
ggtitle("Wireless Canada F_CHURN records over time by company") +  # Set title
theme_bw()
ggplot(ret2, aes(x=CAL_QTR_NM, y=churn, group = Group_Name, colour = Group_Name)) +
#  scale_x_date(format = "%Y-%m-%d") +
#stat_smooth(aes(), # continuous x-axis
#            se = F, method = "lm", formula = y ~ poly(x, 20)) +
geom_line(size=.3, alpha=.9) +
xlab("Date") + ylab("Churn Records") +
ggtitle("Wireless Canada F_CHURN records over time by company") +  # Set title
theme_bw()
qry2 <- dbSendQuery(canada_con,"select a.*, b.CAL_QTR_NM, c.Group_Name into #t1 from com_cdm..f_final_churn a
join com_cdm..d_date b on a.CYear = b.YEAR_NUM and a.CMonth = b.MONTH_NUM and a.CDay = b.DAY_OF_THE_MONTH
join com_cdm_stage..D_LL_Groups_Companies_Subsidiaries_OCNs_Canada c on a.CHURN_WINNING_SP = c.Group_SP
where churn_winning_mode = 'W';
select CAL_QTR_NM, Group_Name, count(Group_Name) as churn from  #t1
group by CAL_QTR_NM, Group_Name
order by CAL_QTR_NM, Group_Name
")
ggplot(ret2, aes(x=CAL_QTR_NM, y=churn, group = Group_Name, colour = Group_Name)) +
#  scale_x_date(format = "%Y-%m-%d") +
#stat_smooth(aes(), # continuous x-axis
#            se = F, method = "lm", formula = y ~ poly(x, 20)) +
geom_line(size=.3, alpha=.9) +
xlab("Date") + ylab("Churn Records") +
ggtitle("Wireless Canada F_CHURN records quarterly over time by company") +  # Set title
theme_bw()
require(RJDBC)
require(ggplot2)
require(TTR)
require(plyr)
dir_path <- "/Users/idaher/Documents/Comlinkdata/Introductory and Reference/Drivers/"
path_sqljdbc4 <- paste0(dir_path, "sqljdbc4.jar")
drv <- JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver",
path_sqljdbc4)
canada_con <- dbConnect(drv, "jdbc:sqlserver://52.5.206.182:1433", "IDaher", "Pi^VitAc")
qry2 <- dbSendQuery(canada_con,"select a.*, b.CAL_QTR_NM, c.Group_Name into #t1 from com_cdm..f_final_churn a
join com_cdm..d_date b on a.CYear = b.YEAR_NUM and a.CMonth = b.MONTH_NUM and a.CDay = b.DAY_OF_THE_MONTH
join com_cdm_stage..D_LL_Groups_Companies_Subsidiaries_OCNs_Canada c on a.CHURN_WINNING_SP = c.Group_SP
where churn_winning_mode = 'W';
select CAL_QTR_NM, Group_Name, count(Group_Name) as churn from  #t1
group by CAL_QTR_NM, Group_Name
order by CAL_QTR_NM, Group_Name
")
ret2 <- fetch(qry2,n=-1) ## return all elements
#ret2[,2] <- as.Date(ret2[,2], "%Y-%m-%d")
head(ret2)
ggplot(ret2, aes(x=CAL_QTR_NM, y=churn, group = Group_Name, colour = Group_Name)) +
#  scale_x_date(format = "%Y-%m-%d") +
#stat_smooth(aes(), # continuous x-axis
#            se = F, method = "lm", formula = y ~ poly(x, 20)) +
geom_line(size=.3, alpha=.9) +
xlab("Date") + ylab("Churn Records") +
ggtitle("Wireless Canada F_CHURN records quarterly over time by company") +  # Set title
theme_bw()
require(RJDBC)
require(ggplot2)
require(TTR)
require(plyr)
dir_path <- "/Users/idaher/Documents/Comlinkdata/Introductory and Reference/Drivers/"
path_sqljdbc4 <- paste0(dir_path, "sqljdbc4.jar")
drv <- JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver",
path_sqljdbc4)
canada_con <- dbConnect(drv, "jdbc:sqlserver://52.5.206.182:1433", "IDaher", "Pi^VitAc")
qry <- dbSendQuery(canada_con,"
select cast(left(convert(varchar(25), churn_date),11) as datetime) as churn_date,  count(cast(left(convert(varchar(25), churn_date),11) as datetime)) as fchurn into #t1
from com_cdm..f_churn
where churn_date_dim_id > 8217 and churn_type not like 'A%'
group by cast(left(convert(varchar(25), churn_date),11) as datetime);
select cast(left(convert(varchar(25), churn_date),11) as datetime) as churn_date,  count(cast(left(convert(varchar(25), churn_date),11) as datetime)) as FFchurn into #t2
from com_cdm..f_final_churn
where churn_date_dim_id > 8217
group by cast(left(convert(varchar(25), churn_date),11) as datetime);
select cast(left(convert(varchar(25),DATEADD(hh, -5, cast(substring([timestamp], 1, 4)  +  '-'
+ substring([timestamp], 5, 2) + '-'
+ substring([timestamp], 7, 2) + ' '
+ substring([timestamp], 9, 2) + ':'
+ substring([timestamp], 11, 2) + ':'
+ substring([timestamp], 13, 2) as datetime))),11) as datetime) as sv_date, count(cast(left(convert(varchar(25),DATEADD(hh, -5, cast(substring([timestamp], 1, 4)  +  '-'
+ substring([timestamp], 5, 2) + '-'
+ substring([timestamp], 7, 2) + ' '
+ substring([timestamp], 9, 2) + ':'
+ substring([timestamp], 11, 2) + ':'
+ substring([timestamp], 13, 2) as datetime))),11) as datetime)) as sv_count
into #t3
from com_cdr..pre_delta_stream_unprocessed
group by cast(left(convert(varchar(25),DATEADD(hh, -5, cast(substring([timestamp], 1, 4)  +  '-'
+ substring([timestamp], 5, 2) + '-'
+ substring([timestamp], 7, 2) + ' '
+ substring([timestamp], 9, 2) + ':'
+ substring([timestamp], 11, 2) + ':'
+ substring([timestamp], 13, 2) as datetime))),11) as datetime);
select churn_date as date, churn_count,sv_count from
#t1 a left outer join #t2 b on a.churn_date = b.sv_date left outer join #t3 c on c.churn_date = b.sv_date order by churn_date asc;
")
qry <- dbSendQuery(canada_con,"
select cast(left(convert(varchar(25), churn_date),11) as datetime) as churn_date,  count(cast(left(convert(varchar(25), churn_date),11) as datetime)) as fchurn into #t1
from com_cdm..f_churn
where churn_date_dim_id > 8217 -- and churn_type not like 'A%'
group by cast(left(convert(varchar(25), churn_date),11) as datetime);
select cast(left(convert(varchar(25), churn_date),11) as datetime) as churn_date,  count(cast(left(convert(varchar(25), churn_date),11) as datetime)) as FFchurn into #t2
from com_cdm..f_final_churn
where churn_date_dim_id > 8217
group by cast(left(convert(varchar(25), churn_date),11) as datetime);
select cast(left(convert(varchar(25),DATEADD(hh, -5, cast(substring([timestamp], 1, 4)  +  '-'
+ substring([timestamp], 5, 2) + '-'
+ substring([timestamp], 7, 2) + ' '
+ substring([timestamp], 9, 2) + ':'
+ substring([timestamp], 11, 2) + ':'
+ substring([timestamp], 13, 2) as datetime))),11) as datetime) as sv_date, count(cast(left(convert(varchar(25),DATEADD(hh, -5, cast(substring([timestamp], 1, 4)  +  '-'
+ substring([timestamp], 5, 2) + '-'
+ substring([timestamp], 7, 2) + ' '
+ substring([timestamp], 9, 2) + ':'
+ substring([timestamp], 11, 2) + ':'
+ substring([timestamp], 13, 2) as datetime))),11) as datetime)) as sv_count
into #t3
from com_cdr..pre_delta_stream_unprocessed
group by cast(left(convert(varchar(25),DATEADD(hh, -5, cast(substring([timestamp], 1, 4)  +  '-'
+ substring([timestamp], 5, 2) + '-'
+ substring([timestamp], 7, 2) + ' '
+ substring([timestamp], 9, 2) + ':'
+ substring([timestamp], 11, 2) + ':'
+ substring([timestamp], 13, 2) as datetime))),11) as datetime);
select a.churn_date as date,sv_count, fchurn, FFchurn from
#t1 a left outer join #t2 b on a.churn_date = b.churn_date left outer join #t3 c on a.churn_date = c.sv_date order by a.churn_date asc;
")
canada_con <- dbConnect(drv, "jdbc:sqlserver://52.5.206.182:1433", "IDaher", "Pi^VitAc")
qry <- dbSendQuery(canada_con,"
select cast(left(convert(varchar(25), churn_date),11) as datetime) as churn_date,  count(cast(left(convert(varchar(25), churn_date),11) as datetime)) as fchurn into #t1
from com_cdm..f_churn
where churn_date_dim_id > 8217 -- and churn_type not like 'A%'
group by cast(left(convert(varchar(25), churn_date),11) as datetime);
select cast(left(convert(varchar(25), churn_date),11) as datetime) as churn_date,  count(cast(left(convert(varchar(25), churn_date),11) as datetime)) as FFchurn into #t2
from com_cdm..f_final_churn
where churn_date_dim_id > 8217
group by cast(left(convert(varchar(25), churn_date),11) as datetime);
select cast(left(convert(varchar(25),DATEADD(hh, -5, cast(substring([timestamp], 1, 4)  +  '-'
+ substring([timestamp], 5, 2) + '-'
+ substring([timestamp], 7, 2) + ' '
+ substring([timestamp], 9, 2) + ':'
+ substring([timestamp], 11, 2) + ':'
+ substring([timestamp], 13, 2) as datetime))),11) as datetime) as sv_date, count(cast(left(convert(varchar(25),DATEADD(hh, -5, cast(substring([timestamp], 1, 4)  +  '-'
+ substring([timestamp], 5, 2) + '-'
+ substring([timestamp], 7, 2) + ' '
+ substring([timestamp], 9, 2) + ':'
+ substring([timestamp], 11, 2) + ':'
+ substring([timestamp], 13, 2) as datetime))),11) as datetime)) as sv_count
into #t3
from com_cdr..pre_delta_stream_unprocessed
group by cast(left(convert(varchar(25),DATEADD(hh, -5, cast(substring([timestamp], 1, 4)  +  '-'
+ substring([timestamp], 5, 2) + '-'
+ substring([timestamp], 7, 2) + ' '
+ substring([timestamp], 9, 2) + ':'
+ substring([timestamp], 11, 2) + ':'
+ substring([timestamp], 13, 2) as datetime))),11) as datetime);
select a.churn_date as date,sv_count, fchurn, FFchurn from
#t1 a left outer join #t2 b on a.churn_date = b.churn_date left outer join #t3 c on a.churn_date = c.sv_date order by a.churn_date asc;
")
ret <- fetch(qry,n=-1) ## return all elements
ret[,1] <- as.Date(ret[,1], "%Y-%m-%d")
ret <- ret[order(ret$date),]
ret$dayofweek <- format(ret$date,format="%A")
overallmean <- ddply(ret,"recordType",summarise,meanRecords=mean(count))
qry <- dbSendQuery(canada_con,"select * from com_canada..quarterlyCounts"
qry <- dbSendQuery(canada_con,"select * from com_canada..quarterlyCounts")
qry <- dbSendQuery(canada_con,"select * from com_canada..quarterlyCounts")
canada_con <- dbConnect(drv, "jdbc:sqlserver://52.5.206.182:1433", "IDaher", "Pi^VitAc")
qry <- dbSendQuery(canada_con,"select * from com_canada..quarterlyCounts")
qry <- dbSendQuery(canada_con,"select * from com_canada..quarterlyCounts order by date")
ret <- fetch(qry,n=-1)
ggplot(ret, aes(x=date, y=count, group = interaction(company,type), color = company, fill=type))
+ geom_bar(stat="identity",position="dodge")
ggplot(ret, aes(x=date, y=count, group = interaction(company,type), color = company, fill=type))
+ geom_bar(position="dodge")
ggplot(ret, aes(x=date, y=count, group = interaction(company,type), color = company, fill=type))
+geom_line()
ggplot(ret, aes(x=date, y=count, group = interaction(company,type), color = company, fill=type)) +
geom_line()
ggplot(ret, aes(x=date, y=count, group = interaction(company,type), color = company, fill=type)) +
geom_bar(stat="identity",position="dodge")
ggplot(ret, aes(x=date, y=count, group = interaction(company,type), color = company, linetype=type)) +
geom_line()
ggplot(ret, aes(x=date, y=count, group = interaction(company,type), color = type, linetype=company)) +
geom_line()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(knitr)
install.packages("knitr")
library(knitr)
get wd()
getwd()
setwd("/Users/idaher/Documents/DataScienceCourse/RepData_PeerAssessment1/")
read.csv("activity.csv")
head(read.csv("activity.csv"))
data <- read.csv("activity.csv")
head(data[,2])
data[,2] <- as.Date(data[,2])
colnames(data)
ddply(data, date, numcolwise(sum))
library(dplyr)
ddply(data, date, numcolwise(sum))
detach("package:dplyr", unload=TRUE)
library(plyr)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
ddply(data, date, numcolwise(sum))
